buildscript {
    dependencies {
        classpath "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"
    }
    repositories {
        maven {
            name = "CrowdinTranslate"
            url = "https://minecraft.guntram.de/maven/"
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
    }
}

plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "org.ajoberstar.grgit" version "4.1.0"
}

apply plugin: "de.guntram.mcmod.crowdin-translate"
crowdintranslate.crowdinProjectname = "sync-fabric"
crowdintranslate.minecraftProjectName = "sync"
crowdintranslate.verbose = true

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String loaderDependencyVersion = project.loader_version.split(/\+/)[0]
String minecraftDependencyVersion = project.minecraft_version.split(/[+ -]/)[0]

group = project.maven_group
version = "${project.mod_version}${getVersionMetadata()}" as Object
archivesBaseName = "${project.archives_base_name}-mc${minecraftDependencyVersion}"

loom {
    accessWidenerPath = file("src/main/resources/sync.accesswidener")
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Releases"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = "Ladysnake Snapshots"
        url = 'https://maven.ladysnake.org/snapshots'
    }
    maven {
        name = "Nexus OSS Repository"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "CrowdinTranslate"
        url = "https://minecraft.guntram.de/maven/"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }
    maven {
        url = "https://maven.cafeteria.dev"
    }
    maven {
        name = 'Quilt'
        url = "https://maven.quiltmc.org/repository/release"
    }
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$loader_version")
    }
}

// To change the versions see the gradle.properties file
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //modImplementation(include("de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"))
    modImplementation(include("teamreborn:energy:${project.tr_energy_version}"))
    modImplementation(include("io.github.ladysnake:satin:${project.satin_version}"))
    modImplementation(include("maven.modrinth:smart-recipes:${project.smartrecipes_version}"))

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modCompileOnly "dev.emi:trinkets:${project.trinkets_version}"
    modCompileOnly("io.github.ladysnake:requiem-api:${project.requiem_version}", { transitive false })
    modCompileOnly "maven.modrinth:origins:${project.origins_version}"
    modCompileOnly("com.github.apace100:apoli:${project.apoli_version}") {
        exclude(group: "me.shedaniel.cloth")
    }
    modCompileOnly "maven.modrinth:haema:${project.haema_version}"
}

processResources {
    filesMatching("fabric.mod.json") {
        expand([
            "version": version,
            "fabric": ">=${loaderDependencyVersion}",
            "minecraft": ">=${minecraftDependencyVersion}",
            "smart_recipes": project.smartrecipes_version,
            "satin_api": project.satin_version,
            "crowdin_translate": project.crowdin_translate_version,
            "team_reborn_energy": project.tr_energy_version,
            "cloth_config": ">=${project.cloth_version}",
            "modmenu": ">=${project.modmenu_version}",
            "trinkets": ">=${project.trinkets_version}",
            "requiem": ">=${project.requiem_version}",
            "origins": ">=${project.origins_version}",
            "haema": ">=${project.haema_version}",
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    it.options.release.set(17)
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE.md"
}

@SuppressWarnings("GrMethodMayBeStatic") // It cannot
String getVersionMetadata() {
    // Release builds don't require additional metadata
    String ref = System.getenv("GITHUB_REF")
    if (ref != null && ref.startsWith("refs/tags/")) {
        return ""
    }

    // GitHub CI builds only
    String build_id = System.getenv("GITHUB_RUN_NUMBER")
    if (build_id != null && build_id.length() != 0) {
        return "+build.${build_id}"
    }

    if (grgit != null && grgit.head() != null) {
        def id = grgit.head().abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "+rev.${id}"
    }

    // No tracking information could be found about the build
    return "+unknown"
}
